{"ast":null,"code":"var _jsxFileName = \"/Users/dvas22/Desktop/David/www/development/code/node/tutorials/sam/fullStack/frontend/src/components/Posts.js\";\nimport { Box, Button, Text, Input } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validFileTypes = ['image/jpg', 'image/jpeg', 'image/png'];\nconst Posts = () => {\n  const handleUpload = async e => {\n    console.log(e);\n    const file = e.target.files[0];\n    if (!validFileTypes.find(type => type === file.type)) {\n      console.log(\"not the right type dude\");\n\n      //setError('File must be in JPG/PNG format');\n      //return;\n    } else {\n      console.log(\"Right type dude\");\n      console.log(file);\n    }\n  };\n\n  /*\n    const [refetch, setRefetch] = useState(0);\n  const {\n    mutate: uploadImage,\n    isLoading: uploading,\n    error: uploadError,\n  } = useMutation({ url: URL });\n   const {\n    data: imageUrls = [],\n    isLoading: imagesLoading,\n    error: fetchError,\n  } = useQuery(URL, refetch);\n   const [error, setError] = useState('');\n     const handleUpload = async e => {\n    const file = e.target.files[0];\n     if (!validFileTypes.find(type => type === file.type)) {\n      setError('File must be in JPG/PNG format');\n      return;\n    }\n     const form = new FormData();\n    form.append('image', file);\n     await uploadImage(form);\n    setTimeout(() => {\n      setRefetch(s => s + 1);\n    }, 1000);\n  };\n  */\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    mt: 6,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      id: \"imageInput\",\n      type: \"file\",\n      hidden: true,\n      onChange: handleUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      as: \"label\",\n      htmlFor: \"imageInput\",\n      colorScheme: \"blue\",\n      variant: \"outline\",\n      mb: 4,\n      cursor: \"pointer\",\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      textAlign: \"left\",\n      mb: 4,\n      children: \"Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_c = Posts;\nexport default Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["Box","Button","Text","Input","validFileTypes","Posts","handleUpload","e","console","log","file","target","files","find","type"],"sources":["/Users/dvas22/Desktop/David/www/development/code/node/tutorials/sam/fullStack/frontend/src/components/Posts.js"],"sourcesContent":["import { Box, Button, Text, Input } from '@chakra-ui/react';\n\nconst validFileTypes = ['image/jpg', 'image/jpeg', 'image/png'];\n\nconst Posts = () => {\n  const handleUpload = async e => {\n    console.log(e)\n    const file = e.target.files[0];\n    if (!validFileTypes.find(type => type === file.type)) {\n      console.log(\"not the right type dude\")\n \n      //setError('File must be in JPG/PNG format');\n      //return;\n    } else {\n      console.log(\"Right type dude\")\n      console.log(file)\n\n    }\n\n  };\n\n  /*\n    const [refetch, setRefetch] = useState(0);\n  const {\n    mutate: uploadImage,\n    isLoading: uploading,\n    error: uploadError,\n  } = useMutation({ url: URL });\n\n  const {\n    data: imageUrls = [],\n    isLoading: imagesLoading,\n    error: fetchError,\n  } = useQuery(URL, refetch);\n\n  const [error, setError] = useState('');\n\n    const handleUpload = async e => {\n    const file = e.target.files[0];\n\n    if (!validFileTypes.find(type => type === file.type)) {\n      setError('File must be in JPG/PNG format');\n      return;\n    }\n\n    const form = new FormData();\n    form.append('image', file);\n\n    await uploadImage(form);\n    setTimeout(() => {\n      setRefetch(s => s + 1);\n    }, 1000);\n  };\n  */\n\n  return (\n    <Box mt={6}>\n      <Input id=\"imageInput\" type=\"file\" hidden onChange={handleUpload} />\n      <Button\n        as=\"label\"\n        htmlFor=\"imageInput\"\n        colorScheme=\"blue\"\n        variant=\"outline\"\n        mb={4}\n        cursor=\"pointer\"\n      >\n        Upload\n      </Button>\n      <Text textAlign=\"left\" mb={4}>\n        Posts\n      </Text>\n    </Box>\n  );\n};\nexport default Posts;\n"],"mappings":";AAAA,SAASA,GAAG,EAAEC,MAAM,EAAEC,IAAI,EAAEC,KAAK,QAAQ,kBAAkB;AAAC;AAE5D,MAAMC,cAAc,GAAG,CAAC,WAAW,EAAE,YAAY,EAAE,WAAW,CAAC;AAE/D,MAAMC,KAAK,GAAG,MAAM;EAClB,MAAMC,YAAY,GAAG,MAAMC,CAAC,IAAI;IAC9BC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;IACd,MAAMG,IAAI,GAAGH,CAAC,CAACI,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9B,IAAI,CAACR,cAAc,CAACS,IAAI,CAACC,IAAI,IAAIA,IAAI,KAAKJ,IAAI,CAACI,IAAI,CAAC,EAAE;MACpDN,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;;MAEtC;MACA;IACF,CAAC,MAAM;MACLD,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC9BD,OAAO,CAACC,GAAG,CAACC,IAAI,CAAC;IAEnB;EAEF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAQE,oBACE,QAAC,GAAG;IAAC,EAAE,EAAE,CAAE;IAAA,wBACT,QAAC,KAAK;MAAC,EAAE,EAAC,YAAY;MAAC,IAAI,EAAC,MAAM;MAAC,MAAM;MAAC,QAAQ,EAAEJ;IAAa;MAAA;MAAA;MAAA;IAAA,QAAG,eACpE,QAAC,MAAM;MACL,EAAE,EAAC,OAAO;MACV,OAAO,EAAC,YAAY;MACpB,WAAW,EAAC,MAAM;MAClB,OAAO,EAAC,SAAS;MACjB,EAAE,EAAE,CAAE;MACN,MAAM,EAAC,SAAS;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAGT,eACT,QAAC,IAAI;MAAC,SAAS,EAAC,MAAM;MAAC,EAAE,EAAE,CAAE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAEtB;EAAA;IAAA;IAAA;IAAA;EAAA,QACH;AAEV,CAAC;AAAC,KArEID,KAAK;AAsEX,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module"}